#!/usr/bin/env python

"""
This script reads all of the constants (enum, val) from
the Scintilla.iface file, formats them to the required naming
conventions, and then writes them out to a C header file.
"""

import os
import sys

from ifaceproc.processor import Processor
from ifaceproc.formatter import *

enum_count = 0
val_count = 0
def_count = 0	

consts = []	
enums = []
lexers = []

	
def get_defs(iface_file):
	" Really slow, but who cares? "

	defines = []
	
	def on_constant(const, *args, **kwargs):
		global consts
		consts.append(const)
	
	def on_enum(enum, *args, **kwargs):
		global enums
		enums.append(enum)
		
	def on_lex(lex, *args, **kwargs):
		global lexers
		lexers.append(lex)

	proc = Processor(iface_file, "\t")
	proc.connect("lex", on_lex)
	proc.connect("enum", on_enum)
	proc.connect("const", on_constant)
	proc.run()

	def in_enum(name, enums):
		for enum in enums:
			for pfx in enum.prefixes:
				for ev in enum.values:
					nn = "%s%s" % (pfx, ev.name)
					if name == nn: return True
		else: return False
	
	def in_lex(name, lexers):
		for lex in lexers:
			for pfx in lex.prefixes:
				for lv in lex.values:
					nn = "%s%s" % (pfx, lv.name)
					if name == nn: return True
		else: return False
	

	known_prefixes = ["SC_", "SCI_"]
	
	for const in consts:
		if not in_enum(const.name, enums) and not in_lex(const.name, lexers):
			nn = const.name
			for p in known_prefixes:
				if nn.startswith(p):
					nn = nn.replace(p,"")
			defines.append("#define GTK_SCINTILLA_%s %s" % (nn, const.value))
	
	return defines

def write_constants(iface_file, chdr_file):
	
	global def_count, enum_count, val_count
	
	fsrc = open(chdr_file, "w")
			
	def on_enum(enum, *args, **kwargs):
		global enum_count, val_count
		fsrc.write("%s\n" % format_enum("GtkScintilla", enum))
		enum_count += 1
		val_count += len(enum.values)

	proc = Processor(iface_file, "\t")
	
	proc.connect("enum", on_enum)
	
	fsrc.write("""/* This file is auto-generated, do not edit. */

#ifndef GTK_SCINTILLA_CONSTANTS_H
#define GTK_SCINTILLA_CONSTANTS_H

G_BEGIN_DECLS


""")

	defs = get_defs(iface_file)
	def_count = len(defs)
	for d in defs:
		fsrc.write("%s\n" % d)
	
	fsrc.write("\n\n")
	
	proc.run()
	
	fsrc.write("""
G_END_DECLS

#endif /* ifndef GTK_SCINTILLA_CONSTANTS_H */
""")

	fsrc.close()

if __name__ == "__main__":
	
	from optparse import OptionParser
	
	p = OptionParser(
			usage="Usage: %prog -H CHDR /path/to/Scintilla.iface")

	p.add_option('-H', metavar="HSOURCE", dest="hsrc_file",
		help="C header filename to output code to")

	opts, args = p.parse_args()
	
	if not opts.hsrc_file:
		p.error("missing C header file option (-H)")
	
	if len(args) < 1:
		p.error("missing Scintilla iface file")
	if not os.path.isfile(args[0]):
		p.error("specified Scintilla iface file does not exist")
	
	write_constants(args[0], opts.hsrc_file)

	print "Wrote out %d enums, %d enum values, and %d" % (
		enum_count, val_count, def_count),
	print "other constants to '%s'." % os.path.basename(opts.hsrc_file)
	
