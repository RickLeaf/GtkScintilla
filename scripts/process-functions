#!/usr/bin/env python

"""
This script reads all of the functions/features (fun, get, set) from
the Scintilla.iface file, formats them to the required naming/calling
conventions, and then writes them out to a C source file and a C
header file.
"""

import os
import sys

from ifaceproc.processor import Processor
from ifaceproc.formatter import *

func_count = 0

def write_funcs(iface_file, csrc_file, chdr_file):

	fhdr = open(chdr_file, "w")
	fsrc = open(csrc_file, "w")
		
	def on_function(func, *args, **kwargs):
		global func_count
		fsrc.write("%s" % format_function("gsci", func))
		fhdr.write("%s" % format_function_proto("gsci", func))
		func_count += 1

	proc = Processor(iface_file, "\t")

	proc.connect("fun", on_function)
	proc.connect("get", on_function)
	proc.connect("set", on_function)
	
	hcode = """/* This file is auto-generated, do not edit. */

#ifndef GTK_SCINTILLA_FUNCTIONS_H
#define GTK_SCINTILLA_FUNCTIONS_H

G_BEGIN_DECLS


"""
	fhdr.write(hcode)
	
	ccode = """/* This file is auto-generated, do not edit. */

#include <%s>

""" % os.path.basename(chdr_file)

	fsrc.write(ccode)
	
	# process the whole file, firing callback on each function
	proc.run()
	
	hcode = """
	
G_END_DECLS

#endif /* ifndef GTK_SCINTILLA_FUNCTIONS_H */
"""
	fhdr.write(hcode)
	
	fsrc.close()
	fhdr.close()
		
	
if __name__ == "__main__":
	
	from optparse import OptionParser
	
	p = OptionParser(
			usage="Usage: %prog -c CSRC -H CHDR /path/to/Scintilla.iface"
	)
	
	p.add_option('-c', metavar="CSOURCE", dest="csrc_file",
		help="C source filename to output code to")
	p.add_option('-H', metavar="HSOURCE", dest="hsrc_file",
		help="C header filename to output code to")

	opts, args = p.parse_args()
	
	if not opts.csrc_file:
		p.error("missing C source file option (-c)")
	if not opts.hsrc_file:
		p.error("missing C header file option (-H)")
	
	if len(args) < 1:
		p.error("missing Scintilla iface file")
	if not os.path.isfile(args[0]):
		p.error("specified Scintilla iface file does not exist")
	
	write_funcs(args[0], opts.csrc_file, opts.hsrc_file)

	print "Wrote out %d functions and prototypes to" % func_count,
	print "'%s' and '%s'." % (
		os.path.basename(opts.csrc_file), 
		os.path.basename(opts.hsrc_file))
