/* gtkeditor.h generated by valac 0.10.0, the Vala compiler, do not modify */


#ifndef __GTKEDITOR_H__
#define __GTKEDITOR_H__

#include <glib.h>
#include <gtk/gtk.h>
#include <stdlib.h>
#include <string.h>
#include <Scintilla.h>
#include <SciLexer.h>
#include <ScintillaWidget.h>
#include <glib-object.h>

G_BEGIN_DECLS


#define GTK_TYPE_EDITOR (gtk_editor_get_type ())
#define GTK_EDITOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_EDITOR, GtkEditor))
#define GTK_EDITOR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_EDITOR, GtkEditorClass))
#define GTK_IS_EDITOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_EDITOR))
#define GTK_IS_EDITOR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_EDITOR))
#define GTK_EDITOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_EDITOR, GtkEditorClass))

typedef struct _GtkEditor GtkEditor;
typedef struct _GtkEditorClass GtkEditorClass;
typedef struct _GtkEditorPrivate GtkEditorPrivate;

#define GTK_EDITOR_TYPE_FOLD_MARKER_STYLES (gtk_editor_fold_marker_styles_get_type ())

#define GTK_EDITOR_TYPE_INDENT_VIEWS (gtk_editor_indent_views_get_type ())

#define GTK_EDITOR_TYPE_SIGNALS (gtk_editor_signals_get_type ())

#define GTK_TYPE_EDITOR_STYLE (gtk_editor_style_get_type ())
typedef struct _GtkEditorStyle GtkEditorStyle;

#define GTK_TYPE_IEDITOR_LEXER (gtk_ieditor_lexer_get_type ())
#define GTK_IEDITOR_LEXER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_IEDITOR_LEXER, GtkIEditorLexer))
#define GTK_IS_IEDITOR_LEXER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_IEDITOR_LEXER))
#define GTK_IEDITOR_LEXER_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), GTK_TYPE_IEDITOR_LEXER, GtkIEditorLexerIface))

typedef struct _GtkIEditorLexer GtkIEditorLexer;
typedef struct _GtkIEditorLexerIface GtkIEditorLexerIface;

#define GTK_TYPE_CPP_LEXER (gtk_cpp_lexer_get_type ())
#define GTK_CPP_LEXER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_CPP_LEXER, GtkCppLexer))
#define GTK_CPP_LEXER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_CPP_LEXER, GtkCppLexerClass))
#define GTK_IS_CPP_LEXER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_CPP_LEXER))
#define GTK_IS_CPP_LEXER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_CPP_LEXER))
#define GTK_CPP_LEXER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_CPP_LEXER, GtkCppLexerClass))

typedef struct _GtkCppLexer GtkCppLexer;
typedef struct _GtkCppLexerClass GtkCppLexerClass;
typedef struct _GtkCppLexerPrivate GtkCppLexerPrivate;

#define GTK_TYPE_PERL_LEXER (gtk_perl_lexer_get_type ())
#define GTK_PERL_LEXER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_PERL_LEXER, GtkPerlLexer))
#define GTK_PERL_LEXER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_PERL_LEXER, GtkPerlLexerClass))
#define GTK_IS_PERL_LEXER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_PERL_LEXER))
#define GTK_IS_PERL_LEXER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_PERL_LEXER))
#define GTK_PERL_LEXER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_PERL_LEXER, GtkPerlLexerClass))

typedef struct _GtkPerlLexer GtkPerlLexer;
typedef struct _GtkPerlLexerClass GtkPerlLexerClass;
typedef struct _GtkPerlLexerPrivate GtkPerlLexerPrivate;

#define GTK_TYPE_PYTHON_LEXER (gtk_python_lexer_get_type ())
#define GTK_PYTHON_LEXER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_PYTHON_LEXER, GtkPythonLexer))
#define GTK_PYTHON_LEXER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_PYTHON_LEXER, GtkPythonLexerClass))
#define GTK_IS_PYTHON_LEXER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_PYTHON_LEXER))
#define GTK_IS_PYTHON_LEXER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_PYTHON_LEXER))
#define GTK_PYTHON_LEXER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_PYTHON_LEXER, GtkPythonLexerClass))

typedef struct _GtkPythonLexer GtkPythonLexer;
typedef struct _GtkPythonLexerClass GtkPythonLexerClass;
typedef struct _GtkPythonLexerPrivate GtkPythonLexerPrivate;

struct _GtkEditor {
	GtkFrame parent_instance;
	GtkEditorPrivate * priv;
};

struct _GtkEditorClass {
	GtkFrameClass parent_class;
	void (*style_needed) (GtkEditor* self, gint position);
	void (*char_added) (GtkEditor* self, gint ch);
	void (*save_point_reached) (GtkEditor* self);
	void (*save_point_left) (GtkEditor* self);
	void (*modify_attempt_ro) (GtkEditor* self);
	void (*key) (GtkEditor* self, gint ch, gint modifiers);
	void (*double_click) (GtkEditor* self);
	void (*update_ui) (GtkEditor* self);
	void (*modified) (GtkEditor* self, gint position, gint modificationType, const char* text, gint length, gint linesAdded, gint line, gint foldLevelNow, gint foldLevelPrev);
	void (*macro_record) (GtkEditor* self, gint message, gint wParam, gint lParam);
	void (*margin_click) (GtkEditor* self, gint modifiers, gint position, gint margin);
	void (*need_shown) (GtkEditor* self, gint position, gint length);
	void (*painted) (GtkEditor* self);
	void (*user_list_selection) (GtkEditor* self, gint listType, const char* text);
	void (*uri_dropped) (GtkEditor* self, const char* text);
	void (*dwell_start) (GtkEditor* self, gint position);
	void (*dwell_end) (GtkEditor* self, gint position);
	void (*zoom) (GtkEditor* self);
	void (*hot_spot_click) (GtkEditor* self, gint modifiers, gint position);
	void (*hot_spot_double_click) (GtkEditor* self, gint modifiers, gint position);
	void (*call_tip_click) (GtkEditor* self, gint position);
	void (*auto_c_selection) (GtkEditor* self, const char* text);
	void (*indicator_click) (GtkEditor* self, gint modifiers, gint position);
	void (*indicator_release) (GtkEditor* self, gint modifiers, gint position);
	void (*auto_c_cancelled) (GtkEditor* self);
	void (*auto_c_char_deleted) (GtkEditor* self);
};

typedef enum  {
	GTK_EDITOR_FOLD_MARKER_STYLES_ARROW,
	GTK_EDITOR_FOLD_MARKER_STYLES_PLUS_MINUS,
	GTK_EDITOR_FOLD_MARKER_STYLES_CIRCLE_TREE,
	GTK_EDITOR_FOLD_MARKER_STYLES_BOX_TREE
} GtkEditorFoldMarkerStyles;

typedef enum  {
	GTK_EDITOR_INDENT_VIEWS_NONE,
	GTK_EDITOR_INDENT_VIEWS_REAL,
	GTK_EDITOR_INDENT_VIEWS_LOOKFORWARD,
	GTK_EDITOR_INDENT_VIEWS_LOOKBOTH
} GtkEditorIndentViews;

typedef enum  {
	GTK_EDITOR_SIGNALS_STYLE_NEEDED = 2000,
	GTK_EDITOR_SIGNALS_CHAR_ADDED = 2001,
	GTK_EDITOR_SIGNALS_SAVE_POINT_REACHED = 2002,
	GTK_EDITOR_SIGNALS_SAVE_POINT_LEFT = 2003,
	GTK_EDITOR_SIGNALS_MODIFY_ATTEMPT_R_O = 2004,
	GTK_EDITOR_SIGNALS_KEY = 2005,
	GTK_EDITOR_SIGNALS_DOUBLE_CLICK = 2006,
	GTK_EDITOR_SIGNALS_UPDATE_UI = 2007,
	GTK_EDITOR_SIGNALS_MODIFIED = 2008,
	GTK_EDITOR_SIGNALS_MACRO_RECORD = 2009,
	GTK_EDITOR_SIGNALS_MARGIN_CLICK = 2010,
	GTK_EDITOR_SIGNALS_NEED_SHOWN = 2011,
	GTK_EDITOR_SIGNALS_PAINTED = 2013,
	GTK_EDITOR_SIGNALS_USER_LIST_SELECTION = 2014,
	GTK_EDITOR_SIGNALS_URI_DROPPED = 2015,
	GTK_EDITOR_SIGNALS_DWELL_START = 2016,
	GTK_EDITOR_SIGNALS_DWELL_END = 2017,
	GTK_EDITOR_SIGNALS_ZOOM = 2018,
	GTK_EDITOR_SIGNALS_HOT_SPOT_CLICK = 2019,
	GTK_EDITOR_SIGNALS_HOT_SPOT_DOUBLE_CLICK = 2020,
	GTK_EDITOR_SIGNALS_CALL_TIP_CLICK = 2021,
	GTK_EDITOR_SIGNALS_AUTO_C_SELECTION = 2022,
	GTK_EDITOR_SIGNALS_INDICATOR_CLICK = 2023,
	GTK_EDITOR_SIGNALS_INDICATOR_RELEASE = 2024,
	GTK_EDITOR_SIGNALS_AUTO_C_CANCELLED = 2025,
	GTK_EDITOR_SIGNALS_AUTO_C_CHAR_DELETED = 2026,
	GTK_EDITOR_SIGNALS_HOT_SPOT_RELEASE_CLICK = 2027
} GtkEditorSignals;

struct _GtkEditorStyle {
	gint index;
	char* name;
	gint fg_color;
	gint bg_color;
	gboolean bold;
	gboolean italic;
};

struct _GtkIEditorLexerIface {
	GTypeInterface parent_iface;
	gboolean (*read_config) (GtkIEditorLexer* self, const char* filename);
	gboolean (*write_config) (GtkIEditorLexer* self, const char* filename);
	char** (*list_props) (GtkIEditorLexer* self, int* result_length1);
	gboolean (*has_prop) (GtkIEditorLexer* self, const char* propname);
	gboolean (*get_prop_as_int) (GtkIEditorLexer* self, const char* propname, gint* propvalue);
	gboolean (*get_prop_as_bool) (GtkIEditorLexer* self, const char* propname, gboolean* propvalue);
	gboolean (*get_prop_as_string) (GtkIEditorLexer* self, const char* propname, char** propvalue);
	char* (*get_prop) (GtkIEditorLexer* self, const char* propname);
	gboolean (*set_prop) (GtkIEditorLexer* self, const char* propname, const char* propvalue);
};

struct _GtkCppLexer {
	GObject parent_instance;
	GtkCppLexerPrivate * priv;
	ScintillaObject* sci;
	char** lexer_properties;
	gint lexer_properties_length1;
	gint lexer_properties_length2;
	char** lexer_keywords;
	gint lexer_keywords_length1;
	gint lexer_keywords_length2;
	char** lexer_styles;
	gint lexer_styles_length1;
	gint lexer_styles_length2;
};

struct _GtkCppLexerClass {
	GObjectClass parent_class;
};

struct _GtkPerlLexer {
	GObject parent_instance;
	GtkPerlLexerPrivate * priv;
	ScintillaObject* sci;
	char** lexer_properties;
	gint lexer_properties_length1;
	gint lexer_properties_length2;
	char** lexer_keywords;
	gint lexer_keywords_length1;
	gint lexer_keywords_length2;
	char** lexer_styles;
	gint lexer_styles_length1;
	gint lexer_styles_length2;
};

struct _GtkPerlLexerClass {
	GObjectClass parent_class;
};

struct _GtkPythonLexer {
	GObject parent_instance;
	GtkPythonLexerPrivate * priv;
	ScintillaObject* sci;
	char** lexer_properties;
	gint lexer_properties_length1;
	gint lexer_properties_length2;
	char** lexer_keywords;
	gint lexer_keywords_length1;
	gint lexer_keywords_length2;
	char** lexer_styles;
	gint lexer_styles_length1;
	gint lexer_styles_length2;
};

struct _GtkPythonLexerClass {
	GObjectClass parent_class;
};


GType gtk_editor_get_type (void) G_GNUC_CONST;
GType gtk_editor_fold_marker_styles_get_type (void) G_GNUC_CONST;
GType gtk_editor_indent_views_get_type (void) G_GNUC_CONST;
GType gtk_editor_signals_get_type (void) G_GNUC_CONST;
GtkEditor* gtk_editor_new (void);
GtkEditor* gtk_editor_construct (GType object_type);
GType gtk_editor_style_get_type (void) G_GNUC_CONST;
GtkEditorStyle* gtk_editor_style_dup (const GtkEditorStyle* self);
void gtk_editor_style_free (GtkEditorStyle* self);
void gtk_editor_style_copy (const GtkEditorStyle* self, GtkEditorStyle* dest);
void gtk_editor_style_destroy (GtkEditorStyle* self);
void gtk_editor_set_style_state (GtkEditor* self, int state, GtkEditorStyle* style);
void gtk_editor_clear_styles (GtkEditor* self);
void gtk_editor_insert_text (GtkEditor* self, gint position, const char* text);
void gtk_editor_set_line_indentation (GtkEditor* self, gint line, gint indentation);
gint gtk_editor_get_line_indentation (GtkEditor* self, gint line);
gint gtk_editor_get_line_indent_position (GtkEditor* self, gint line);
GType gtk_ieditor_lexer_get_type (void) G_GNUC_CONST;
GtkIEditorLexer* gtk_editor_get_lexer (GtkEditor* self);
void gtk_editor_set_lexer (GtkEditor* self, GtkIEditorLexer* value);
gboolean gtk_editor_get_folding (GtkEditor* self);
void gtk_editor_set_folding (GtkEditor* self, gboolean value);
gint gtk_editor_get_fold_margin_color (GtkEditor* self);
void gtk_editor_set_fold_margin_color (GtkEditor* self, gint value);
gint gtk_editor_get_fold_marker_fore_color (GtkEditor* self);
void gtk_editor_set_fold_marker_fore_color (GtkEditor* self, gint value);
gint gtk_editor_get_fold_marker_back_color (GtkEditor* self);
void gtk_editor_set_fold_marker_back_color (GtkEditor* self, gint value);
GtkEditorFoldMarkerStyles gtk_editor_get_fold_marker_style (GtkEditor* self);
void gtk_editor_set_fold_marker_style (GtkEditor* self, GtkEditorFoldMarkerStyles value);
const char* gtk_editor_get_default_font_desc (GtkEditor* self);
gint gtk_editor_get_font_size (GtkEditor* self);
void gtk_editor_set_font_size (GtkEditor* self, gint value);
const char* gtk_editor_get_font_desc (GtkEditor* self);
void gtk_editor_set_font_desc (GtkEditor* self, const char* value);
gboolean gtk_editor_get_line_nums_visible (GtkEditor* self);
void gtk_editor_set_line_nums_visible (GtkEditor* self, gboolean value);
const char* gtk_editor_get_text (GtkEditor* self);
void gtk_editor_set_text (GtkEditor* self, const char* value);
gint gtk_editor_get_tab_width (GtkEditor* self);
void gtk_editor_set_tab_width (GtkEditor* self, gint value);
gboolean gtk_editor_get_use_tabs (GtkEditor* self);
void gtk_editor_set_use_tabs (GtkEditor* self, gboolean value);
gboolean gtk_editor_get_tab_indents (GtkEditor* self);
void gtk_editor_set_tab_indents (GtkEditor* self, gboolean value);
gboolean gtk_editor_get_backspace_unindents (GtkEditor* self);
void gtk_editor_set_backspace_unindents (GtkEditor* self, gboolean value);
GtkEditorIndentViews gtk_editor_get_indentation_guides (GtkEditor* self);
void gtk_editor_set_indentation_guides (GtkEditor* self, GtkEditorIndentViews value);
gint gtk_editor_get_highlight_guide (GtkEditor* self);
void gtk_editor_set_highlight_guide (GtkEditor* self, gint value);
void gtk_editor_style_needed (GtkEditor* self, gint position);
void gtk_editor_char_added (GtkEditor* self, gint ch);
void gtk_editor_save_point_reached (GtkEditor* self);
void gtk_editor_save_point_left (GtkEditor* self);
void gtk_editor_modify_attempt_ro (GtkEditor* self);
void gtk_editor_key (GtkEditor* self, gint ch, gint modifiers);
void gtk_editor_double_click (GtkEditor* self);
void gtk_editor_update_ui (GtkEditor* self);
void gtk_editor_modified (GtkEditor* self, gint position, gint modificationType, const char* text, gint length, gint linesAdded, gint line, gint foldLevelNow, gint foldLevelPrev);
void gtk_editor_macro_record (GtkEditor* self, gint message, gint wParam, gint lParam);
void gtk_editor_margin_click (GtkEditor* self, gint modifiers, gint position, gint margin);
void gtk_editor_need_shown (GtkEditor* self, gint position, gint length);
void gtk_editor_painted (GtkEditor* self);
void gtk_editor_user_list_selection (GtkEditor* self, gint listType, const char* text);
void gtk_editor_uri_dropped (GtkEditor* self, const char* text);
void gtk_editor_dwell_start (GtkEditor* self, gint position);
void gtk_editor_dwell_end (GtkEditor* self, gint position);
void gtk_editor_zoom (GtkEditor* self);
void gtk_editor_hot_spot_click (GtkEditor* self, gint modifiers, gint position);
void gtk_editor_hot_spot_double_click (GtkEditor* self, gint modifiers, gint position);
void gtk_editor_call_tip_click (GtkEditor* self, gint position);
void gtk_editor_auto_c_selection (GtkEditor* self, const char* text);
void gtk_editor_indicator_click (GtkEditor* self, gint modifiers, gint position);
void gtk_editor_indicator_release (GtkEditor* self, gint modifiers, gint position);
void gtk_editor_auto_c_cancelled (GtkEditor* self);
void gtk_editor_auto_c_char_deleted (GtkEditor* self);
gint gtk_editor_style_hex_to_dec (const char* hex);
gboolean gtk_ieditor_lexer_read_config (GtkIEditorLexer* self, const char* filename);
gboolean gtk_ieditor_lexer_write_config (GtkIEditorLexer* self, const char* filename);
char** gtk_ieditor_lexer_list_props (GtkIEditorLexer* self, int* result_length1);
gboolean gtk_ieditor_lexer_has_prop (GtkIEditorLexer* self, const char* propname);
gboolean gtk_ieditor_lexer_get_prop_as_int (GtkIEditorLexer* self, const char* propname, gint* propvalue);
gboolean gtk_ieditor_lexer_get_prop_as_bool (GtkIEditorLexer* self, const char* propname, gboolean* propvalue);
gboolean gtk_ieditor_lexer_get_prop_as_string (GtkIEditorLexer* self, const char* propname, char** propvalue);
char* gtk_ieditor_lexer_get_prop (GtkIEditorLexer* self, const char* propname);
gboolean gtk_ieditor_lexer_set_prop (GtkIEditorLexer* self, const char* propname, const char* propvalue);
GType gtk_cpp_lexer_get_type (void) G_GNUC_CONST;
#define GTK_CPP_LEXER_lexer_index 3
#define GTK_CPP_LEXER_lexer_name "cpp"
GtkCppLexer* gtk_cpp_lexer_new (ScintillaObject* sci);
GtkCppLexer* gtk_cpp_lexer_construct (GType object_type, ScintillaObject* sci);
gboolean gtk_cpp_lexer_get_styling_within_preprocessor (GtkCppLexer* self);
void gtk_cpp_lexer_set_styling_within_preprocessor (GtkCppLexer* self, gboolean value);
gboolean gtk_cpp_lexer_get_allow_dollars (GtkCppLexer* self);
void gtk_cpp_lexer_set_allow_dollars (GtkCppLexer* self, gboolean value);
gboolean gtk_cpp_lexer_get_track_preprocessor (GtkCppLexer* self);
void gtk_cpp_lexer_set_track_preprocessor (GtkCppLexer* self, gboolean value);
gboolean gtk_cpp_lexer_get_update_preprocessor (GtkCppLexer* self);
void gtk_cpp_lexer_set_update_preprocessor (GtkCppLexer* self, gboolean value);
gboolean gtk_cpp_lexer_get_fold (GtkCppLexer* self);
void gtk_cpp_lexer_set_fold (GtkCppLexer* self, gboolean value);
gboolean gtk_cpp_lexer_get_fold_comment (GtkCppLexer* self);
void gtk_cpp_lexer_set_fold_comment (GtkCppLexer* self, gboolean value);
gboolean gtk_cpp_lexer_get_fold_comment_explicit (GtkCppLexer* self);
void gtk_cpp_lexer_set_fold_comment_explicit (GtkCppLexer* self, gboolean value);
gboolean gtk_cpp_lexer_get_fold_preprocessor (GtkCppLexer* self);
void gtk_cpp_lexer_set_fold_preprocessor (GtkCppLexer* self, gboolean value);
gboolean gtk_cpp_lexer_get_fold_compact (GtkCppLexer* self);
void gtk_cpp_lexer_set_fold_compact (GtkCppLexer* self, gboolean value);
gboolean gtk_cpp_lexer_get_fold_at_else (GtkCppLexer* self);
void gtk_cpp_lexer_set_fold_at_else (GtkCppLexer* self, gboolean value);
GType gtk_perl_lexer_get_type (void) G_GNUC_CONST;
#define GTK_PERL_LEXER_lexer_index 6
#define GTK_PERL_LEXER_lexer_name "perl"
GtkPerlLexer* gtk_perl_lexer_new (ScintillaObject* sci);
GtkPerlLexer* gtk_perl_lexer_construct (GType object_type, ScintillaObject* sci);
GType gtk_python_lexer_get_type (void) G_GNUC_CONST;
#define GTK_PYTHON_LEXER_lexer_index 2
#define GTK_PYTHON_LEXER_lexer_name "python"
GtkPythonLexer* gtk_python_lexer_new (ScintillaObject* sci);
GtkPythonLexer* gtk_python_lexer_construct (GType object_type, ScintillaObject* sci);


G_END_DECLS

#endif
